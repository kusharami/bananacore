function testQUrl()
{
	assert(isFinite(QUrl.TolerantMode));
	assert(isFinite(QUrl.StrictMode));
	assert(isFinite(QUrl.DecodedMode));
	assert(isFinite(QUrl.None));
	assert(isFinite(QUrl.RemoveScheme));
	assert(isFinite(QUrl.RemovePassword));
	assert(isFinite(QUrl.RemoveUserInfo));
	assert(isFinite(QUrl.RemovePort));
	assert(isFinite(QUrl.RemoveAuthority));
	assert(isFinite(QUrl.RemovePath));
	assert(isFinite(QUrl.RemoveQuery));
	assert(isFinite(QUrl.RemoveFragment));
	assert(isFinite(QUrl.PreferLocalFile));
	assert(isFinite(QUrl.StripTrailingSlash));
	assert(isFinite(QUrl.RemoveFilename));
	assert(isFinite(QUrl.NormalizePathSegments));
	assert(isFinite(QUrl.PrettyDecoded));
	assert(isFinite(QUrl.EncodeSpaces));
	assert(isFinite(QUrl.EncodeUnicode));
	assert(isFinite(QUrl.EncodeDelimiters));
	assert(isFinite(QUrl.EncodeReserved));
	assert(isFinite(QUrl.DecodeReserved));
	assert(isFinite(QUrl.FullyEncoded));
	assert(isFinite(QUrl.FullyDecoded));
	assert(isFinite(QUrl.DefaultResolution));
	assert(isFinite(QUrl.AssumeLocalFile));

	assert(QUrl.prototype.valid === false);
	assert(QUrl.prototype.empty === true);
	assert(QUrl.prototype.relative === false);
	assert(QUrl.prototype.hasQuery === false);
	assert(QUrl.prototype.hasFragment === false);
	assert(QUrl.prototype.isLocalFile === false);

	assert(QUrl.prototype.url === "");
	assert(QUrl.prototype.scheme === "");
	assert(QUrl.prototype.authority === "");
	assert(QUrl.prototype.userInfo === "");
	assert(QUrl.prototype.userName === "");
	assert(QUrl.prototype.password === "");
	assert(QUrl.prototype.host === "");
	assert(QUrl.prototype.port === -1);
	assert(QUrl.prototype.path === "");
	assert(QUrl.prototype.query === "");
	assert(QUrl.prototype.fragment === "");
	assert(QUrl.prototype.topLevelDomain === "");
	assert(QUrl.prototype.fileName === "");
	assert(QUrl.prototype.filePath === "");
	assert(QUrl.prototype.errorString === "");

	assert(!QUrl.prototype.isParentOf(""));
	assert(QUrl.prototype.resolved("").equals(""));
	assert(QUrl.prototype.adjusted(QUrl.None).equals(""));
	assert(QUrl.prototype.toString() === "QUrl");
	assert(QUrl.prototype.valueOf() === "");
	assert(QUrl.prototype.toString(QUrl.PrettyDecoded) === "");
	assert(QUrl.prototype.toDisplayString(QUrl.PrettyDecoded) === "");
	assert(QUrl.prototype.toEncoded(QUrl.FullyEncoded) === "");

	assert(QUrl.prototype.getPort(80) === -1);
	assert(QUrl.prototype.getAuthority(QUrl.PrettyDecoded) === "");
	assert(QUrl.prototype.getUserInfo(QUrl.PrettyDecoded) === "");
	assert(QUrl.prototype.getUserName(QUrl.PrettyDecoded) === "");
	assert(QUrl.prototype.getPassword(QUrl.PrettyDecoded) === "");
	assert(QUrl.prototype.getHost(QUrl.PrettyDecoded) === "");
	assert(QUrl.prototype.getTopLevelDomain(QUrl.PrettyDecoded) === "");
	assert(QUrl.prototype.getPath(QUrl.PrettyDecoded) === "");
	assert(QUrl.prototype.getFileName(QUrl.PrettyDecoded) === "");
	assert(QUrl.prototype.getQuery(QUrl.PrettyDecoded) === "");
	assert(QUrl.prototype.getFragment(QUrl.PrettyDecoded) === "");
	QUrl.prototype.clear();
	QUrl.prototype.setUrl("", QUrl.TolerantMode);
	QUrl.prototype.setAuthority("", QUrl.TolerantMode);
	QUrl.prototype.setUserInfo("", QUrl.TolerantMode);
	QUrl.prototype.setUserName("", QUrl.DecodedMode);
	QUrl.prototype.setPassword("", QUrl.DecodedMode);
	QUrl.prototype.setHost("", QUrl.DecodedMode);
	QUrl.prototype.setQuery("", QUrl.DecodedMode);
	QUrl.prototype.setFragment("", QUrl.DecodedMode);

	var url = new QUrl();
	assert(url instanceof QUrl);
	assert(url.toString() === "");
	assert(url.empty);
	assert(!url.valid);
	assert(url.relative);
	assert(!url.hasQuery);
	assert(!url.hasFragment);
	assert(!url.isLocalFile);
	assert(url.url === "");
	assert(url.scheme === "");
	assert(url.authority === "");
	assert(url.userInfo === "");
	assert(url.userName === "");
	assert(url.password === "");
	assert(url.host === "");
	assert(url.port === -1);
	assert(url.path === "");
	assert(url.query === "");
	assert(url.fragment === "");
	assert(url.topLevelDomain === "");
	assert(url.fileName === "");
	assert(url.filePath === "");
	assert(url.errorString === "");
	var file = new QTemporaryFile();
	assert(file.open());
	url.filePath = file.filePath;
	assert(url.equals(QUrl.fromLocalFile(file.filePath)));
	var fileInfo = new QFileInfo(file.filePath);
	assert(url.isLocalFile);
	assert(!url.empty);
	assert(url.valid);
	assert(!url.relative);
	assert(!url.hasQuery);
	assert(!url.hasFragment);
	var fileScheme = "file";
	var fileSchemeSep = fileScheme + "://";
	assert(url.scheme === fileScheme);
	assert(url.filePath === file.filePath);
	assert(url.fileName === fileInfo.fileName);
	assert(url.toString() === url.valueOf());
	assert(url.toString() === fileSchemeSep + url.path);
	assert(url.toString().indexOf(file.filePath) >= fileSchemeSep.length);
	assert(url.authority === "");
	assert(url.userInfo === "");
	url.userInfo = "a:b";
	assert(url.userName === "a");
	assert(url.password === "b");
	url.host = "ach.com";
	url.port = 8080;
	assert(url.topLevelDomain === ".com");
	assert(url.authority === strf(
			   "%1@%2:%3", url.userInfo, url.host, url.port));
	url.query = "query";
	assert(url.hasQuery);
	url.fragment = "fragment";
	assert(url.hasFragment);
	assert(url.toString() === strf("%1://%2%3?%4#%5",
								   url.scheme, url.authority, url.path,
								   url.query, url.fragment));
	print(url);
	assert(url.toEncoded() === url.toEncoded(QUrl.FullyEncoded));
	assert(url.adjusted(
			  QUrl.RemoveScheme | QUrl.RemoveAuthority |
			  QUrl.RemoveQuery | QUrl.RemoveFragment).equals(url.path));
	var url2 = new QUrl(url);
	url2.filePath = fileInfo.path + '/';
	assert(url2.isParentOf(url));
	assert(!url.equals(url2));
	assert(url2.fileName === "");
	assert(url2.resolved(fileInfo.fileName).path === url.path);
	url2.url = "../" + fileInfo.fileName;
	assert(url2.relative);
	assert(!url2.isLocalFile);
	url.filePath = "../" + fileInfo.fileName;
	assert(url.equals(url2));
	var encoded = "%20%20%29";
	assert(QUrl.fromEncoded(encoded).path === decodeURI(encoded));
	var uri = "http://b.com/Русский";
	assert(QUrl.fromUserInput(uri).toEncoded() === encodeURI(uri));

	print("QUrl OK");
}
